{"version":3,"sources":["images/josh.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","checkTime","today","Date","parse","offset","getMonth","josh","getFullYear","toString","getDate","setState","isJoshDay","timeToJoshDay","t","d","Math","floor","h","m","s","updateMessage","state","message","getTimezoneOffset","window","setInterval","this","bind","Background","Image","src","picture","visible","MainText","Component","Rotate","keyframes","styled","div","h1","img","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,mlCCkF5BC,E,kDA7Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcRC,UAAY,WACV,EAAKC,MAAQ,IAAIC,KACjB,EAAKD,MAAQ,IAAIC,KAAKA,KAAKC,MAAM,EAAKF,OAAwB,KAAd,EAAKG,QACjD,EAAKH,MAAMI,WAAa,EAC1B,EAAKC,KAAO,IAAIJ,KAAK,EAAKD,MAAMM,cAAcC,WAAa,UACzB,IAAzB,EAAKP,MAAMI,WAChB,EAAKJ,MAAMQ,UAAY,EACzB,EAAKH,KAAO,IAAIJ,KAAK,EAAKD,MAAMM,cAAcC,WAAa,UAClD,EAAKP,MAAMQ,UAAY,EAChC,EAAKH,KAAO,IAAIJ,MAAM,EAAKD,MAAMM,cAAgB,GAAGC,WAAa,UAC/B,IAAzB,EAAKP,MAAMQ,YACpB,EAAKH,KAAO,IAAIJ,KAChB,EAAKQ,SAAS,CAAEC,WAAW,KAEpB,EAAKV,MAAMI,WAAa,IACjC,EAAKC,KAAO,IAAIJ,MAAM,EAAKD,MAAMM,cAAgB,GAAGC,WAAa,WAEnE,EAAKF,KAAO,IAAIJ,KAAKA,KAAKC,MAAM,EAAKG,MAAuB,KAAd,EAAKF,SAhClC,EAmCnBQ,cAAgB,WACd,IAAIC,EAAI,EAAKP,KAAO,EAAKL,MACrBa,EAAIC,KAAKC,MAAMH,EAAI,OACnBI,EAAIF,KAAKC,MAAMH,EAAI,MAAS,MAC5BK,EAAIH,KAAKC,MAAMH,EAAI,KAAQ,KAC3BM,EAAIJ,KAAKC,MAAMH,EAAI,IAAM,KAE7B,OAAQC,EAAEN,WAAa,UAAYS,EAAET,WAAa,WAAaU,EAAEV,WAAa,iBAAmBW,EAAEX,WAAa,aA1C/F,EA6CnBY,cAAgB,WACV,EAAKC,MAAMV,UACb,EAAKD,SAAS,CAAEY,QAAS,4CAEzB,EAAKZ,SAAS,CAAEY,QAAS,EAAKV,mBA/ChC,EAAKS,MAAQ,CACXV,WAAW,EACXW,QAAS,IAEX,EAAKrB,MAAQ,IAAIC,KACjB,EAAKE,QAAU,EAAKH,MAAMsB,oBAAsB,GAChD,EAAKtB,MAAQ,IAAIC,KAAKA,KAAKC,MAAM,EAAKF,OAAwB,KAAd,EAAKG,QACrD,EAAKE,KAAO,IAAIJ,KAAK,EAAKD,MAAMM,cAAcC,WAAa,UAC3D,EAAKF,KAAO,IAAIJ,KAAKA,KAAKC,MAAM,EAAKG,MAAuB,KAAd,EAAKF,QACnD,EAAKJ,YACL,EAAKoB,gBAZY,E,gEAsDjBI,OAAOC,YAAY,WACjBC,KAAK1B,YACL0B,KAAKN,iBACLO,KAAKD,MAAO,O,+BAId,OACE,kBAACE,EAAD,KACE,kBAACC,EAAD,CAAOC,IAAKC,IAASC,QAASN,KAAKL,MAAMV,aACvCe,KAAKL,MAAMV,WACX,kBAACsB,EAAD,2CAIF,kBAACA,EAAD,KACGP,KAAKL,MAAMC,c,GAvEJY,aAgFZC,EAASC,YAAH,KAKNR,EAAaS,IAAOC,IAAV,KAWVL,EAAWI,IAAOE,GAAV,KAQRV,EAAQQ,IAAOG,IAAV,KACE,SAAAzC,GAAK,OAAuB,IAAlBA,EAAMiC,QAAoB,eAAiB,SAEnDG,GCnGKM,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnC,c","file":"static/js/main.8aa58a5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/josh.d4fced9a.jpg\";","import React, { Component } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport picture from './images/josh.jpg';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isJoshDay: false,\n      message: '',\n    }\n    this.today = new Date();\n    this.offset = -this.today.getTimezoneOffset() / 60;\n    this.today = new Date(Date.parse(this.today) + (this.offset * 3.6e6));\n    this.josh = new Date(this.today.getFullYear().toString() + '-04-04');\n    this.josh = new Date(Date.parse(this.josh) + (this.offset * 3.6e6));\n    this.checkTime();\n    this.updateMessage();\n  }\n\n  checkTime = () => {\n    this.today = new Date();\n    this.today = new Date(Date.parse(this.today) + (this.offset * 3.6e6));\n    if (this.today.getMonth() < 3) {\n      this.josh = new Date(this.today.getFullYear().toString() + '-04-04');\n    } else if (this.today.getMonth() ===3) {\n      if (this.today.getDate() < 4) {\n        this.josh = new Date(this.today.getFullYear().toString() + '-04-04');\n      } else if (this.today.getDate() > 4) {\n        this.josh = new Date((this.today.getFullYear() + 1).toString() + '-04-04');\n      } else if (this.today.getDate() === 4) {\n        this.josh = new Date();\n        this.setState({ isJoshDay: true });\n      }\n    } else if (this.today.getMonth() > 3) {\n      this.josh = new Date((this.today.getFullYear() + 1).toString() + '-04-04');\n    }\n    this.josh = new Date(Date.parse(this.josh) + (this.offset * 3.6e6));\n  }\n\n  timeToJoshDay = () => {\n    var t = this.josh - this.today;\n    var d = Math.floor(t / 8.64e7);\n    var h = Math.floor(t % 8.64e7 / 3.6e6);\n    var m = Math.floor(t % 3.6e6 / 6e4);\n    var s = Math.floor(t % 6e4 / 1e3);\n\n    return (d.toString() + ' days, ' + h.toString() + ' hours, ' + m.toString() + ' minutes, and ' + s.toString() + ' seconds.');\n  }\n\n  updateMessage = () => {\n    if (this.state.isJoshDay) {\n      this.setState({ message: \"IT'S INTERNATIONAL JOSH DAY! CELEBRATE!\" });\n    } else {\n      this.setState({ message: this.timeToJoshDay() });\n    }\n  }\n\n  componentDidMount() {\n    window.setInterval(function() {\n      this.checkTime();\n      this.updateMessage();\n    }.bind(this), 500);\n  }\n\n  render() {\n    return (\n      <Background>\n        <Image src={picture} visible={this.state.isJoshDay} />\n        {!this.state.isJoshDay &&\n          <MainText>\n            Time Until International Josh Day:\n          </MainText>\n        }\n        <MainText>\n          {this.state.message}\n        </MainText>\n      </Background>\n    )\n  }\n}\n\nexport default App;\n\nconst Rotate = keyframes`\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n`;\n\nconst Background = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #bbd4f2;\n  text-align: center;\n  flex-direction: column;\n`;\n\nconst MainText = styled.h1`\n  color: #424242;\n  font-family: Open Sans;\n  font-size: 42px;\n  margin-bottom: -10px;\n  z-index: 1;\n`;\n\nconst Image = styled.img`\n  display: ${props => (props.visible === true) ? 'inline-block' : 'none'};\n  height: 50vh;\n  animation: ${Rotate} 1s linear infinite;\n  position: absolute;\n  z-index: 0;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  top: 0;\n  bottom: 0;\n  margin-top: auto;\n  margin-bottom: auto;\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}